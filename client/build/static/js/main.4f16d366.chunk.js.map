{"version":3,"sources":["model/covid_status.ts","util.ts","conversions/person_conversions.ts","conversions/conversions.util.ts","services/remote.service.ts","model/notification.ts","services/person.service.ts","features/person/person.slice.ts","conversions/notification.conversions.ts","services/notification.service.ts","features/login/login.slice.ts","features/person/person.schema.ts","services/cookie.service.ts","features/form.styles.ts","features/routes.ts","services/bike.service.ts","features/bike/bike.slice.ts","conversions/covid_test.conversions.ts","services/covid_test.service.ts","features/covid_tests/covid_testing_centre.slice.ts","features/person/person.form.tsx","features/nav/navbar.tsx","services/entrance.service.ts","features/common/debounced_input.tsx","features/home/entrance_input.tsx","features/home/home.tsx","conversions/bike_conversions.ts","services/person.bike.service.ts","features/bike/bike.log.tsx","features/bike/bike.tsx","features/common/card.styles.ts","features/person/person.card.tsx","features/covid_tests/covid_test.slice.ts","features/covid_tests/covid_test_card.tsx","features/covid_tests/covid_test_landing_page.tsx","features/covid_tests/covid_test.schema.ts","features/covid_tests/covid_test.form.tsx","features/common/accordion.styles.ts","features/notification/notification_accordion.tsx","features/notification/notifications_page.tsx","conversions/scheduled_class.conversions.ts","services/scheduled_class.service.ts","features/common/action_accordion.tsx","features/common/accordion_content.styles.ts","features/scheduled_class/scheduled_class_accordion_content.tsx","features/scheduled_class/scheduled_classes.tsx","services/bubble.service.ts","features/bubble/bubble_accordion_content.tsx","features/bubble/bubble_page.tsx","features/bubble/bubble.schema.ts","features/bubble/bubble.form.tsx","services/stats.service.ts","features/stats/stats_page.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["CovidStatus","isPresent","x","undefined","isStringEmpty","str","formatMoment","date","calendar","split","formatAddress","obj","postalAddress","city","province","postal_code","building_number","street_number","street","capitalize","map","word","charAt","toUpperCase","slice","join","wait","timeout","Promise","resolve","reject","setTimeout","PersonConversions","person","copyAndFilterPerson","KEYS_TO_EXCLUDE","personCopy","deleteKeysToExclude","setNullableFields","UPDATE_NULLABLE_KEYS","response","statusObj","person_status","toCovidStatus","statusString","NEGATIVE","POSITIVE","INFECTED","keysToExclude","deleteEmptyFieldsAndKeys","keysToDelete","Object","keys","forEach","key","has","nullableFields","faculty_id","job_title","Set","toRequestJson","requestData","data","toMoment","dateString","moment","tz","userTimezone","toIsoString","toISOString","guess","RemoteService","url","axios","post","JSON_HEADER","patch","get","delete","headers","NotificationCategory","personService","personId","toPerson","faculty","toCreateFacultyRequest","createdFaculty","toPersonRequest","createdPerson","length","toUpdateFacultyRequest","updatedFaculty","toUpdatePersonRequest","updatedPerson","initialState","in_app_notification","personSlice","createSlice","name","reducers","setPerson","state","action","person_id","payload","student_id","email","phone_number","setPersonStatus","actions","selectPersonState","NotificationConversions","notification","category","IN_APP","EMAIL","TEXT","notificationTimeObject","notification_time","notificationService","this","toNotificationModel","notification_id","loginSlice","isLoggedIn","isAppLoading","login","appLoaded","startStatusPoll","dispatch","a","pollingTimeout","all","getPersonStatusById","getUnreadNotifications","status","unreadNotifications","unreadNotification","toast","error","body","onOpen","markNotificationAsRead","autoClose","console","log","selectIsLoggedIn","selectIsAppLoading","numberRegex","createPersonSchema","Joi","object","string","min","required","tlds","allow","regex","boolean","when","is","then","otherwise","CookieService","Cookies","IDENTITY_COOKIE_KEY","set","toString","expires","Date","formStyles","makeStyles","theme","container","marginTop","display","flexDirection","alignItems","elementsContainer","form","width","submit","margin","spacing","background","editPersonRoute","homeRoute","bikeRoute","personInfoRoute","testsRoute","editTestRoute","createTestRoute","notificationsRoute","scheduledClassesRoute","bubbleLandingRoute","createBubbleRoute","statsRoute","bikeService","bikeSlice","allBikes","setBikes","selectAllBikes","bike","fetchBikes","getAllBikes","bikes","shared_bike_id","CovidTestConversions","covidTests","covidTest","covid_test","test_time","test_input_time","covid_testing_centre","covid_testing_centre_id","centre_name","covidTestFormState","requestModel","UNKNOWN","covidTestService","covidTestingCentresResponse","toCovidTestInfos","requestPayload","toCreateCovidTestPayload","testInputTime","toUpdateCovidTestPayload","centre_id","covidTestingCentreSlice","allCovidTestingCentres","setCovidTestingCentres","selectAllCovidTestingCentres","covidTestingCentre","fetchCovidTestingCentres","getAllCovidTestingCentres","covidTestingCentres","PersonForm","useState","remoteError","setRemoteError","useSelector","useDispatch","history","useHistory","personState","classes","useForm","resolver","joiResolver","defaultValues","register","handleSubmit","control","watch","errors","isFacultyNumberFilledOut","onSubmit","createPerson","setPersonId","updatePerson","push","message","Container","component","maxWidth","CssBaseline","className","noValidate","TextField","variant","inputRef","fullWidth","label","autoComplete","render","props","Checkbox","onChange","event","target","checked","value","Button","type","color","NavBar","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","to","Brand","Nav","Link","entranceService","entranceId","entrance_id","DebouncedInput","onDebounce","placeholder","debounceTime","style","onInputValueChange","debounce","EntranceInput","entranceInfo","entrance","setEntrance","showCheckIn","setShowCheckIn","setError","searchTerm","Number","isNaN","parseInt","getEntranceInfoById","onCheckIn","entranceDefined","createPersonEntrance","info","Typography","roomName","room_number","building_code","room_type","replace","onClick","size","Home","greeting","circleColor","statusMessage","marginRight","icon","faCircle","BikeConversions","responses","toPersonBike","rental_time","personBikeService","toPersonBikes","bikeId","BikeLog","bikeHistories","bikeHistoryElements","bikeHistory","isoString","text","Bike","setHistory","errorMessage","setErrorMessage","rentableBikes","useEffect","getBikeRentalsByPersonId","sharedBikes","includes","createPersonBike","personBike","newHistory","unshift","minLength","cardStyles","root","padding","cardContainer","titleContainer","marginBottom","testingCentreName","textAlign","center","justifyContent","fontSize","whiteSpace","editButton","PersonCard","Card","CardContent","CardActions","setCovidTestToEdit","selectCovidTestToEdit","CovidTestCard","covidTestInfo","CovidTestLandingPage","tests","setTests","isLoading","setIsLoading","getAllCovidTestsForUser","covidTestInfos","sort","testA","testB","isAfter","covidTestCards","test","index","cursor","faPlusCircle","createCovidTestSchema","unknown","updateCovidTestSchema","valid","CovidTestForm","covidTestToEdit","forCreation","formState","find","createCovidTest","updateCovidTest","defaultValue","Autocomplete","options","disabled","getOptionLabel","option","e","renderOption","Fragment","renderInput","params","utils","DateFnsUtils","disableToolbar","format","KeyboardButtonProps","FormControl","InputLabel","Select","labelId","MenuItem","accordionStyles","heading","typography","pxToRem","flexBasis","flexShrink","headingGray","palette","secondary","secondaryHeading","notificationBody","actionContainer","marginLeft","NotificationAccordion","notificationModels","categoryString","model","Accordion","AccordionSummary","expandIcon","faChevronDown","AccordionDetails","NotificationsPage","notifications","setNotifications","getNotifications","notificationsGroupedByMessage","groupBy","notificationElements","keyA","keyB","notificationsA","notificationsB","ScheduledClassConversions","scheduledClassDatas","toClassDay","scheduledClassData","conversionObject","start_day","end_day","day_of_week","day_name","DAY_CONVERSION_MAP","day_number","Map","scheduledClassService","queryString","encodeURI","toClassDays","scheduledClassId","scheduled_class_id","ActionAccordion","onActionClick","actionButtonLabel","children","accordionClasses","stopPropagation","accordionContentStyles","dayContainer","ScheduledClassAccordionContent","classDays","dayClasses","startDay","endDay","classDayA","classDayB","dayInfos","classDay","class_name","ScheduledClasses","enrolledClasses","setEnrolledClasses","searchedClasses","setSearchedClasses","setSearchTerm","isSearchLoading","setIsSearchLoading","refreshEnrolledClasses","getScheduledClassesByPersonId","newEnrolledClasses","setSearchedClassesWithoutEnrolled","searchResults","whitelistedClasses","searchedClassesWithoutEnrolled","filter","searchedClass","hasOwnProperty","onSearch","newSearchTerm","getScheduledClassesByQueryString","newSearchedClasses","onActionButtonClick","endpointFn","onAdd","createPersonScheduledClass","bind","onDelete","deletePersonScheduledClass","enrolledClassElement","searchResultElement","createClassAccordion","classDayDict","activity","bubbleService","bubbleId","bubble_id","bubble","BubbleAccordionContent","canDelete","description","count","BubblePage","usersBubbles","setUsersBubbles","searchedBubbles","setSearchedBubbles","allPeopleText","setAllPeopleText","refreshBubbles","getBubbleInfosByPersonId","bubbles","setSearchedBubblesWithoutWhitelist","whitelistedBubbles","searchedClassesExcludingWhitelist","searchedBubble","some","setAllPeople","allPeopleInSearched","lastPerson","pop","_","getBubbleInfosBySearchTerm","getAllPeopleInBubbleBySearchTerm","allPeople","refreshPage","newBubbles","createPersonBubble","deletePersonBubble","onDeleteBubble","deleteBubbleById","userBubbleElement","title","createBubbleSchema","BubbleForm","createBubble","createdBubble","statsService","StatsPage","frequentlyUsedBuildingStr","setFrequentlyUsedBuildingStr","largestScheduledClassStr","setLargestScheduledClassStr","formatFrequentlyUsedBuilding","frequentlyUsedBuilding","numTimesString","formatScheduledClass","scheduledClass","numPersonsString","formatAndSet","elements","setFunction","formatFn","singleElementString","multiElementString","elementStrs","element","lastEl","getMostFrequentlyVisitedBuildings","getLargestScheduledClasses","mostFrequentlyVisitedBuildings","largestScheduledClasses","formatAndSetFrequentlyUsedBuildings","formatAndSetLargestScheduledClasses","App","getPersonId","getPersonById","fetchPerson","position","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","exact","path","ScheduledClassesPage","store","configureStore","reducer","loginReducer","personReducer","bikeReducer","covidTestingCentreReducer","covidTestReducer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4f16d366.chunk.js","sourcesContent":["import {isPresent} from \"../util\";\n\nexport enum CovidStatus {\n  POSITIVE = \"POSITIVE\",\n  NEGATIVE = \"NEGATIVE\",\n  INFECTED = \"INFECTED\",\n  UNKNOWN = \"UNKNOWN\"\n}\n\nexport function toCovidStatus(status?: boolean) {\n  if (!isPresent(status)) {\n    return CovidStatus.UNKNOWN;\n  } else if (!status) {\n    return CovidStatus.NEGATIVE;\n  } else {\n    return CovidStatus.POSITIVE;\n  }\n}\n","import {Moment} from \"moment-timezone\";\r\n\r\nexport function isPresent(x: any): boolean {\r\n  return x !== null && x !== undefined;\r\n}\r\n\r\nexport function isStringEmpty(str: string | undefined): boolean {\r\n  return !isPresent(str) || str === \"\";\r\n}\r\n\r\nexport function formatMoment(date: Moment): string {\r\n  return date.calendar().split(\" at\")[0];\r\n}\r\n\r\nexport function formatAddress(obj: any): string {\r\n  const postalAddress: string = `${obj.city} ${obj.province} ${obj.postal_code}`;\r\n  return `${obj.building_number} ${obj.street_number ?? obj.street}\\n${postalAddress}`\r\n}\r\n\r\nexport function capitalize(str: string): string {\r\n  const allWords: string[] = str.split(\" \");\r\n  const allWordsCapitalized = allWords.map(word => `${word.charAt(0).toUpperCase()}${word.slice(1)}`);\r\n  return allWordsCapitalized.join(\" \");\r\n}\r\n\r\nexport function pluralize(count: number, str: string): string {\r\n  return count > 1 ? `${str}s` : str;\r\n}\r\n\r\nexport function capitalizeAndRemoveUnderscores(str: string): string {\r\n  return capitalize(str.replace(\"_\", \" \"));\r\n}\r\n\r\nexport function wait(timeout: number): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => resolve(), timeout);\r\n  });\r\n}\r\n","import {Person} from \"../features/person/person.slice\";\nimport {isPresent, isStringEmpty} from \"../util\";\nimport {CovidStatus} from \"../model/covid_status\";\n\nexport class PersonConversions {\n  private static KEYS_TO_EXCLUDE = new Set([\"job_title\", \"person_status\"]);\n  private static UPDATE_NULLABLE_KEYS = new Set([\"email\", \"phone_number\", \"student_id\", \"faculty_id\"])\n\n  public static toPersonRequest(person: Person): any {\n    return PersonConversions.copyAndFilterPerson(person, PersonConversions.KEYS_TO_EXCLUDE);\n  }\n\n  public static toUpdatePersonRequest(person: Person): any {\n    const personCopy: any =  {...person};\n    PersonConversions.deleteKeysToExclude(PersonConversions.KEYS_TO_EXCLUDE, personCopy);\n    PersonConversions.setNullableFields(PersonConversions.UPDATE_NULLABLE_KEYS, personCopy);\n    return personCopy;\n  }\n\n  public static toPerson(response: any): Person {\n    const statusObj = {\n      person_status: PersonConversions.toCovidStatus(response.person_status)\n    };\n    return {...response, ...statusObj};\n  }\n\n  public static toCovidStatus(statusString: string): CovidStatus {\n    if (!isPresent(statusString)) {\n      return CovidStatus.NEGATIVE;\n    }\n\n    switch(statusString) {\n      case 'R':\n        return CovidStatus.POSITIVE;\n      case 'Y':\n        return CovidStatus.INFECTED;\n      default:\n        return CovidStatus.NEGATIVE;\n    }\n  }\n\n  private static copyAndFilterPerson(person: Person, keysToExclude: Set<string>): any {\n    const personCopy: any =  {...person};\n    PersonConversions.deleteEmptyFieldsAndKeys(personCopy);\n    PersonConversions.deleteKeysToExclude(keysToExclude, personCopy);\n    return personCopy;\n  }\n\n  private static deleteKeysToExclude(keysToDelete: Set<string>, person: any): void {\n    Object.keys(person).forEach((key: string) => {\n      if (keysToDelete.has(key)) {\n        delete person[key];\n      }\n    });\n  }\n\n  private static setNullableFields(nullableFields: Set<string>, person: any): void {\n    Object.keys(person).forEach((key: string) => {\n      if (nullableFields.has(key) && isStringEmpty(person[key])) {\n        person[key] = null;\n      }\n    });\n  }\n\n  private static deleteEmptyFieldsAndKeys(person: any): void {\n    Object.keys(person).forEach((key: string) => {\n      if (isStringEmpty(person[key])) {\n        delete person[key];\n      }\n    });\n  }\n\n  public static toCreateFacultyRequest(person: Person): any {\n    return {\n      \"faculty_id\": person.faculty_id,\n      \"job_title\": person.job_title\n    };\n  }\n\n  public static toUpdateFacultyRequest(person: Person): any {\n    return {\n      \"job_title\": person.job_title\n    };\n  }\n}\n","import moment, {Moment} from \"moment-timezone\";\n\nexport function toRequestJson(requestData: any): any {\n  return {\n    data: requestData\n  }\n}\n\nexport function toMoment(dateString: string): Moment {\n  return moment(dateString).tz(userTimezone)\n}\n\nexport function toIsoString(dateString: string): string {\n  return toMoment(dateString).toISOString();\n}\n\nexport const userTimezone: string = moment.tz.guess();\n","import axios, {AxiosResponse} from \"axios\";\nimport {toRequestJson} from \"../conversions/conversions.util\";\n\nexport class RemoteService {\n  private static JSON_HEADER: any = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  public post(url: string, data: any): Promise<AxiosResponse> {\n    return axios.post(url, toRequestJson(data), RemoteService.JSON_HEADER);\n  }\n\n  public patch(url: string, data: any): Promise<AxiosResponse> {\n    return axios.patch(url, toRequestJson(data), RemoteService.JSON_HEADER);\n  }\n\n  public get(url: string): Promise<AxiosResponse> {\n    return axios.get(url);\n  }\n\n  public delete(url: string): Promise<AxiosResponse> {\n    return axios.delete(url);\n  }\n}\n","import {Moment} from \"moment-timezone\";\n\nexport enum NotificationCategory {\n  EMAIL = \"email\",\n  IN_APP = \"in app\",\n  TEXT = \"text\"\n}\n\nexport interface NotificationModel {\n  notification_id: number,\n  notification_time: Moment,\n  is_read: boolean,\n  category: NotificationCategory,\n  subject_line?: string,\n  body: string\n}\n","import {Person} from \"../features/person/person.slice\";\nimport {AxiosResponse} from \"axios\";\nimport {PersonConversions} from \"../conversions/person_conversions\";\nimport {isPresent, isStringEmpty} from \"../util\";\nimport {RemoteService} from \"./remote.service\";\nimport {CovidStatus} from \"../model/covid_status\";\n\nclass PersonService extends RemoteService {\n    public async getPersonById(personId: string): Promise<Person> {\n        const response: AxiosResponse = await super.get(`/person_faculty_info/${personId}`);\n        return PersonConversions.toPerson(response.data[0]);\n    }\n\n    public async getPersonStatusById(personId: number | string): Promise<CovidStatus> {\n        const response: AxiosResponse = await super.get(`/persons_status/${personId}`);\n        const statusString = response.data[0][\"person_status\"] as string;\n        return PersonConversions.toCovidStatus(statusString);\n    }\n\n    public async createPerson(person: Person): Promise<Person> {\n        let faculty = {};\n        if (isPresent(person.faculty_id) && person.faculty_id !== \"\") {\n            const createdFaculty = await super.post(\"/faculties\", PersonConversions.toCreateFacultyRequest(person));\n            faculty = createdFaculty.data[0];\n        }\n        const createdPerson: AxiosResponse = await super.post(\"persons\", PersonConversions.toPersonRequest(person));\n        return Promise.resolve(PersonConversions.toPerson({...createdPerson.data[0], ...faculty}));\n    }\n\n    public async updatePerson(personId: number, person: Person): Promise<Person> {\n        let faculty = {};\n        if (!isStringEmpty(person.faculty_id)) {\n            const existingFaculty = await super.get(`/faculties/${person.faculty_id}`);\n            if (existingFaculty.data.length === 0) {\n                const createdFaculty = await super.post(\"/faculties\", PersonConversions.toCreateFacultyRequest(person));\n                faculty = createdFaculty.data[0];\n            } else {\n                const updatedFaculty = await super.patch(`/faculties/${person.faculty_id}`, PersonConversions.toUpdateFacultyRequest(person));\n                faculty = updatedFaculty.data[0];\n            }\n        }\n        const updatedPerson: AxiosResponse = await super.patch(`persons/${personId}`, PersonConversions.toUpdatePersonRequest(person));\n        return Promise.resolve(PersonConversions.toPerson({...updatedPerson.data[0], ...faculty}));\n    }\n}\n\nexport const personService = new PersonService();\n","import {createSlice, Draft, PayloadAction} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../../app/store\";\nimport {CovidStatus} from \"../../model/covid_status\";\nimport {isStringEmpty} from \"../../util\";\n\nexport interface Person {\n  person_id?: number,\n  name?: string,\n  email?: string,\n  phone_number?: string,\n  in_app_notification?: boolean,\n  // Made these into strings to make form inputs easier\n  student_id?: string,\n  faculty_id?: string,\n  job_title?: string,\n  person_status?: CovidStatus\n}\n\nconst initialState: Person = {\n  in_app_notification: true,\n  person_status: CovidStatus.NEGATIVE\n};\n\nexport const personSlice = createSlice({\n  name: 'person',\n  initialState: initialState,\n  reducers: {\n    setPerson: (state: Draft<Person>, action: PayloadAction<Person>) => {\n      state.person_id = action.payload.person_id;\n      state.name = action.payload.name;\n      state.job_title = action.payload.job_title;\n      state.faculty_id = action.payload.faculty_id;\n      state.student_id = action.payload.student_id;\n      state.in_app_notification = action.payload.in_app_notification;\n      state.email = action.payload.email;\n      state.phone_number = action.payload.phone_number;\n      state.person_status = action.payload.person_status;\n    },\n    setPersonStatus: (state: Draft<Person>, action: PayloadAction<CovidStatus>) => {\n      state.person_status = action.payload;\n    }\n  }\n});\n\nexport const { setPerson, setPersonStatus } = personSlice.actions;\n\nexport const selectPersonState = (state: RootState) => state.person\n\nexport default personSlice.reducer;\n","import {NotificationCategory, NotificationModel} from \"../model/notification\";\nimport {toMoment} from \"./conversions.util\";\n\nexport class NotificationConversions {\n  public static toNotificationModel(notification: any): NotificationModel {\n    let category: NotificationCategory;\n    switch(notification.category) {\n      case \"inApp\":\n        category = NotificationCategory.IN_APP;\n        break;\n      case \"email\":\n        category = NotificationCategory.EMAIL;\n        break;\n      default:\n        category = NotificationCategory.TEXT;\n        break;\n    }\n    const notificationTimeObject = {\n      notification_time: toMoment(notification.notification_time),\n      category: category\n    };\n    return {...notification, ...notificationTimeObject};\n  }\n}\n","import {RemoteService} from \"./remote.service\";\nimport {NotificationModel} from \"../model/notification\";\nimport {NotificationConversions} from \"../conversions/notification.conversions\";\n\nclass NotificationService extends RemoteService {\n  public async getNotifications(personId: number): Promise<NotificationModel[]> {\n    const response = await this.get(`/person_notification_messages_info/${personId}`);\n    return response.data.map(NotificationConversions.toNotificationModel);\n  }\n\n  public async getUnreadNotifications(personId: number | string): Promise<NotificationModel[]> {\n    const response = await this.get(`/inApp_notifications_unread/${personId}`);\n    return response.data;\n  }\n\n  public async markNotificationAsRead(personId: number | string, notification_id: number): Promise<void> {\n    await this.patch(`/person_notifications/read/notification_id/${notification_id}/person_id/${personId}`, {});\n  }\n}\n\nexport const notificationService = new NotificationService();\n","import {createSlice, Draft} from \"@reduxjs/toolkit\";\nimport {AppThunk, RootState} from \"../../app/store\";\nimport {personService} from \"../../services/person.service\";\nimport {Person, setPerson, setPersonStatus} from '../person/person.slice';\nimport {wait} from \"../../util\";\nimport {notificationService} from \"../../services/notification.service\";\nimport {toast} from \"react-toastify\";\n\ninterface LoggedInState {\n  isLoggedIn: boolean,\n  isAppLoading: boolean\n}\n\nconst initialState: LoggedInState = {\n  isLoggedIn: false,\n  isAppLoading: true\n};\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState: initialState,\n  reducers: {\n    login: (state: Draft<LoggedInState>) => {\n      state.isLoggedIn = true\n    },\n    appLoaded: (state: Draft<LoggedInState>) => {\n      state.isAppLoading = false\n    }\n  }\n});\n\nexport const fetchPerson = (personId: string): AppThunk => dispatch => {\n  personService.getPersonById(personId).then((person: Person) => {\n    dispatch(setPerson(person));\n    dispatch(startStatusPoll(personId));\n    dispatch(login());\n    dispatch(appLoaded());\n  });\n};\n\nexport const startStatusPoll = (personId: number | string): AppThunk => async dispatch => {\n  const pollingTimeout: number = 5000;\n\n  while (true) {\n    await wait(pollingTimeout);\n    try {\n      const [status, unreadNotifications] = await Promise.all([\n        personService.getPersonStatusById(personId),\n        notificationService.getUnreadNotifications(personId)]);\n      dispatch(setPersonStatus(status));\n      if (unreadNotifications.length > 0) {\n        unreadNotifications.forEach(unreadNotification => {\n          toast.error(unreadNotification.body, {\n              onOpen: () => notificationService.markNotificationAsRead(personId, unreadNotification.notification_id),\n              autoClose: false\n            }\n          );\n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\nexport const {login, appLoaded} = loginSlice.actions;\nexport const selectIsLoggedIn = (state: RootState): boolean => state.login.isLoggedIn;\nexport const selectIsAppLoading = (state: RootState): boolean => state.login.isAppLoading;\n\nexport default loginSlice.reducer;\n","import Joi from \"joi\";\n\nconst numberRegex = /^\\d+$/;\nexport const createPersonSchema = Joi.object({\n  name: Joi.string().min(1).required(),\n  email: Joi.string().email({ tlds: {allow: false} }).allow(\"\"),\n  phone_number: Joi.string().regex(numberRegex).allow( \"\"),\n  in_app_notification: Joi.boolean().required(),\n  student_id: Joi.string().regex(numberRegex).allow(\"\"),\n  faculty_id: Joi.string().regex(numberRegex).allow(\"\"),\n  job_title: Joi.string().min(1).when(\n    \"faculty_id\",\n    {is: Joi.string(), then: Joi.required(), otherwise: Joi.allow(\"\")})\n});\n","import Cookies from \"js-cookie\";\n\nexport class CookieService {\n  private static IDENTITY_COOKIE_KEY = \"me\";\n\n  public static getPersonId(): string | undefined {\n    return Cookies.get(CookieService.IDENTITY_COOKIE_KEY);\n  }\n\n  public static setPersonId(personId: number): void {\n    Cookies.set(\n      CookieService.IDENTITY_COOKIE_KEY,\n      personId.toString(),\n      {\n        expires: new Date('2025-12-17T03:24:00')\n      });\n  }\n}\n","import {makeStyles} from \"@material-ui/core/styles\";\n\nexport const formStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: \"13vh\",\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  elementsContainer: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  form: {\n    width: '100%'\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    background: 'black'\n  },\n}));","export const editPersonRoute = \"/editPerson\";\r\nexport const homeRoute = \"/home\";\r\nexport const bikeRoute = \"/bike\";\r\nexport const personInfoRoute = \"/personInfo\";\r\nexport const testsRoute = \"/tests\";\r\nexport const editTestRoute = \"/editTest\";\r\nexport const createTestRoute = \"/createTest\";\r\nexport const notificationsRoute = \"/notifications\";\r\nexport const scheduledClassesRoute = \"/scheduled_classes\";\r\nexport const bubbleLandingRoute = \"/bubble_landing\";\r\nexport const createBubbleRoute = \"/create_bubble\";\r\nexport const statsRoute = \"/stats\";\r\n","import {RemoteService} from \"./remote.service\";\n\nclass PersonService extends RemoteService {\n  public async getAllBikes(): Promise<any[]> {\n    const response = await this.get(`/bikes`);\n    return response.data;\n  }\n}\n\nexport const bikeService: PersonService = new PersonService();","import {createSlice, Draft, PayloadAction} from \"@reduxjs/toolkit\";\nimport {bikeService} from \"../../services/bike.service\";\nimport {AppThunk, RootState} from \"../../app/store\";\n\nconst initialState = {\n  allBikes: []\n};\n\nexport const bikeSlice = createSlice({\n  name: 'bike',\n  initialState: initialState,\n  reducers: {\n    setBikes: (state: Draft<any>, action: PayloadAction<string[]>) => {\n      state.allBikes = action.payload;\n    }\n  }\n});\n\nexport const selectAllBikes = (state: RootState) => state.bike.allBikes;\n\nexport const fetchBikes = (): AppThunk => dispatch => {\n  bikeService.getAllBikes().then((bikes: any[]) => {\n    dispatch(bikeSlice.actions.setBikes(bikes.map(bike => bike.shared_bike_id)));\n  });\n};\n\n\nexport default bikeSlice.reducer;","import {CovidTestInfo} from \"../model/covid_test\";\nimport {toIsoString} from \"./conversions.util\";\nimport {CovidTestFormState} from \"../features/covid_tests/covid_test.form\";\nimport {CovidStatus} from \"../model/covid_status\";\n\nexport class CovidTestConversions {\n  public static toCovidTestInfos(covidTests: any[]): CovidTestInfo[] {\n    return covidTests.map(covidTest => {\n      return {\n        covid_test: {\n          test_time: toIsoString(covidTest.test_time),\n          test_input_time: toIsoString(covidTest.test_input_time),\n          status: covidTest.status\n        },\n        covid_testing_centre: {\n          covid_testing_centre_id: covidTest.covid_testing_centre_id,\n          name: covidTest.centre_name,\n          building_number: covidTest.building_number,\n          street_number: covidTest.street_number,\n          postal_code: covidTest.postal_code,\n          city: covidTest.city,\n          province: covidTest.province\n        }\n      }\n    });\n  }\n\n  public static toCreateCovidTestPayload(personId: string | number, covidTestFormState: CovidTestFormState): any {\n    const requestModel: any = {\n      person_id: personId.toString(),\n      test_time: covidTestFormState.test_time.toISOString(),\n      covid_testing_centre_id: covidTestFormState.covid_testing_centre.covid_testing_centre_id\n    };\n    if (covidTestFormState.status !== CovidStatus.UNKNOWN) {\n      requestModel[\"status\"] = covidTestFormState.status === CovidStatus.POSITIVE;\n    }\n\n    return requestModel;\n  }\n\n  public static toUpdateCovidTestPayload(covidTestFormState: CovidTestFormState): any {\n    return {\n      status: covidTestFormState.status === CovidStatus.POSITIVE\n    };\n  }\n}","import {RemoteService} from \"./remote.service\";\nimport {CovidTestingCentre} from \"../model/covid_testing_centre\";\nimport {CovidTestInfo} from \"../model/covid_test\";\nimport {CovidTestConversions} from \"../conversions/covid_test.conversions\";\nimport {CovidTestFormState} from \"../features/covid_tests/covid_test.form\";\n\nclass CovidTestService extends RemoteService {\n  public async getAllCovidTestingCentres(): Promise<CovidTestingCentre[]> {\n    const covidTestingCentresResponse = await this.get(\"/covid_testing_centres\");\n    return covidTestingCentresResponse.data;\n  }\n\n  public async getAllCovidTestsForUser(personId: number): Promise<CovidTestInfo[]> {\n    const response = await this.get(`/covid_test_info/${personId}`);\n    return CovidTestConversions.toCovidTestInfos(response.data);\n  }\n\n  public async createCovidTest(personId: number, covidTestFormState: CovidTestFormState): Promise<void> {\n    const requestPayload: any = CovidTestConversions.toCreateCovidTestPayload(personId, covidTestFormState);\n    await this.post(\"/covid_tests\", requestPayload);\n  }\n\n  public async updateCovidTest(personId: number, covidTestFormState: CovidTestFormState, testInputTime: string): Promise<void> {\n    const requestPayload: any = CovidTestConversions.toUpdateCovidTestPayload(covidTestFormState);\n    const centre_id: number = covidTestFormState.covid_testing_centre.covid_testing_centre_id;\n    await this.patch(\n      `/covid_tests/person_id/${personId}/test_centre_id/${centre_id}/input_time/${testInputTime}`,\n      requestPayload);\n  }\n}\n\nexport const covidTestService = new CovidTestService();","import {createSlice, Draft, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppThunk, RootState} from \"../../app/store\";\nimport {CovidTestingCentre} from \"../../model/covid_testing_centre\";\nimport {covidTestService} from \"../../services/covid_test.service\";\n\ninterface CovidTestingCentreState {\n  allCovidTestingCentres: CovidTestingCentre[]\n}\n\nconst initialState: CovidTestingCentreState = {\n  allCovidTestingCentres: []\n};\n\nexport const covidTestingCentreSlice = createSlice({\n  name: 'covidTestingCentre',\n  initialState: initialState,\n  reducers: {\n    setCovidTestingCentres: (state: Draft<any>, action: PayloadAction<CovidTestingCentre[]>) => {\n      state.allCovidTestingCentres = action.payload;\n    }\n  }\n});\n\nexport const selectAllCovidTestingCentres = (state: RootState) => state.covidTestingCentre.allCovidTestingCentres;\n\nexport const fetchCovidTestingCentres = (): AppThunk => dispatch => {\n  covidTestService.getAllCovidTestingCentres().then((covidTestingCentres: CovidTestingCentre[]) => {\n    dispatch(covidTestingCentreSlice.actions.setCovidTestingCentres(covidTestingCentres));\n  });\n};\n\nexport default covidTestingCentreSlice.reducer;","import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {joiResolver} from '@hookform/resolvers/joi';\nimport Container from '@material-ui/core/Container';\nimport {useForm, Controller} from 'react-hook-form'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {login, startStatusPoll, selectIsLoggedIn} from \"../login/login.slice\";\nimport {Person, selectPersonState, setPerson} from \"./person.slice\";\nimport {createPersonSchema} from \"./person.schema\";\nimport {isStringEmpty} from \"../../util\";\nimport {personService} from \"../../services/person.service\";\nimport {CookieService} from \"../../services/cookie.service\";\nimport {formStyles} from \"../form.styles\";\nimport {useHistory} from \"react-router\";\nimport {personInfoRoute} from \"../routes\";\nimport {fetchBikes} from \"../bike/bike.slice\";\nimport {fetchCovidTestingCentres} from \"../covid_tests/covid_testing_centre.slice\";\n\nexport default function PersonForm() {\n  const [remoteError, setRemoteError] = useState(\"\");\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const personState = useSelector(selectPersonState);\n  const classes = formStyles();\n  const {register, handleSubmit, control, watch, errors} = useForm({\n    resolver: joiResolver(createPersonSchema),\n    defaultValues: {\n      name: personState.name ?? \"\",\n      email: personState.email ?? \"\",\n      phone_number: personState.phone_number ?? \"\",\n      in_app_notification: personState.in_app_notification,\n      student_id: personState.student_id ?? \"\",\n      faculty_id: personState.faculty_id ?? \"\",\n      job_title: personState.job_title ?? \"\"\n    }\n  });\n  const isFacultyNumberFilledOut = !isStringEmpty(watch(\"faculty_id\"));\n\n  const onSubmit = async (person: Person) => {\n    try {\n      if (!isLoggedIn) {\n        const createdPerson = await personService.createPerson(person);\n        CookieService.setPersonId(createdPerson.person_id as number);\n        dispatch(setPerson(createdPerson));\n        dispatch(fetchBikes());\n        dispatch(fetchCovidTestingCentres());\n        dispatch(startStatusPoll(createdPerson.person_id as number));\n        dispatch(login());\n      } else {\n        const updatedPerson = await personService.updatePerson(personState.person_id as number, person);\n        dispatch(setPerson(updatedPerson));\n        history.push(personInfoRoute);\n      }\n    } catch (error) {\n      setRemoteError(error.message);\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline/>\n      <div className={classes.container}>\n        <h3>{isLoggedIn ? \"Edit Info\" : \"Create an Account\"}</h3>\n        <form className={classes.form} noValidate\n              onSubmit={handleSubmit(onSubmit)}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register}\n            required\n            fullWidth\n            label=\"name\"\n            name=\"name\"\n            autoComplete=\"name\"\n          />\n          {errors.name && <p>Name is required.</p>}\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register}\n            fullWidth\n            label=\"email (opt)\"\n            name=\"email\"\n            autoComplete=\"email\"\n          />\n          {errors.email && <p>Email was invalid.</p>}\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register}\n            fullWidth\n            label=\"phone number (opt)\"\n            name=\"phone_number\"\n            autoComplete=\"tel\"\n          />\n          {errors.phone_number && <p>Phone number format was invalid. Proper format: 123456789.</p>}\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register}\n            fullWidth\n            label=\"student number (opt)\"\n            name=\"student_id\"\n          />\n          {errors.student_id && <p>Student number was invalid.</p>}\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register}\n            fullWidth\n            label=\"faculty number (opt)\"\n            name=\"faculty_id\"\n          />\n          {errors.faculty_id && <p>Faculty number was invalid.</p>}\n          {\n            isFacultyNumberFilledOut && (\n              <div>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  inputRef={register}\n                  fullWidth\n                  label=\"job title (opt)\"\n                  name=\"job_title\"\n                />\n                {errors.job_title && <p>Job title must be filled if faculty number is.</p>}\n              </div>\n            )\n          }\n          <Controller name=\"in_app_notification\" control={control} render={(props) => (\n            <div>\n              <Checkbox\n                className=\"input\"\n                onChange={(event) => props.onChange(event.target.checked)}\n                checked={props.value}\n              />\n              <label>In-App Notifications?</label>\n            </div>\n          )}/>\n          {errors.in_app_notification && <p>{errors.in_app_notification.message}</p>}\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            {isLoggedIn ? \"Update\" : \"Sign Up\"}\n          </Button>\n          {remoteError && <p>Please ensure that you have at least one active notification setting.</p>}\n        </form>\n      </div>\n    </Container>\n  );\n}\n","import {Nav, Navbar} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectIsLoggedIn} from \"../login/login.slice\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {selectPersonState} from \"../person/person.slice\";\r\nimport {\r\n  bikeRoute,\r\n  bubbleLandingRoute,\r\n  homeRoute,\r\n  notificationsRoute,\r\n  personInfoRoute,\r\n  scheduledClassesRoute, statsRoute,\r\n  testsRoute\r\n} from \"../routes\";\r\nimport \"./navbar.css\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nexport default function NavBar() {\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n  const person = useSelector(selectPersonState);\r\n\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <LinkContainer to={homeRoute}>\r\n          <Navbar.Brand className=\"mr-auto\">TRACK</Navbar.Brand>\r\n        </LinkContainer>\r\n        {isLoggedIn && (\r\n          <Nav className = \"navbar-links\">\r\n            <LinkContainer to={bubbleLandingRoute}>\r\n              <Nav.Link>Bubble</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to={testsRoute}>\r\n              <Nav.Link>Tests</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to={bikeRoute}>\r\n              <Nav.Link>Bike</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to={scheduledClassesRoute}>\r\n              <Nav.Link>Class</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to={notificationsRoute}>\r\n              <Nav.Link>Notifications</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to={statsRoute}>\r\n              <Nav.Link>Stats</Nav.Link>\r\n            </LinkContainer>\r\n          </Nav>\r\n        )}\r\n        {isLoggedIn && (\r\n          <Nav className=\"ml-auto\">\r\n            <LinkContainer to={personInfoRoute}>\r\n              <Button className=\"personButton\" variant=\"outlined\">{person.name}</Button>\r\n            </LinkContainer>\r\n          </Nav>\r\n        )}\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import {RemoteService} from \"./remote.service\";\nimport {EntranceInfo} from \"../model/entrance_info\";\n\nclass EntranceService extends RemoteService {\n  public async getEntranceInfoById(id: string): Promise<EntranceInfo | undefined> {\n    const response = await this.get(`/entrance_info/${id}`);\n    if (response.data.length === 0) {\n      return undefined;\n    } else {\n      return response.data[0];\n    }\n  }\n\n  public async createPersonEntrance(personId: number, entranceId: number): Promise<void> {\n    await this.post(\"/person_entrances\", {\n      person_id: personId,\n      entrance_id: entranceId\n    });\n  }\n}\n\nexport const entranceService = new EntranceService();\n","import React from \"react\";\r\nimport {debounce} from 'throttle-debounce';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ninterface DebouncedInputProps {\r\n  onDebounce: (searchTerm: string) => any,\r\n  placeholder: string,\r\n  debounceTime?: number,\r\n  label: string,\r\n  style?: any,\r\n  fullWidth?: boolean\r\n}\r\n\r\nexport default function DebouncedInput(\r\n  {\r\n    onDebounce,\r\n    placeholder,\r\n    debounceTime = 300,\r\n    label = \"\",\r\n    style = {},\r\n    fullWidth = false\r\n  }: DebouncedInputProps) {\r\n  const onInputValueChange = debounce(debounceTime, (event) => {\r\n    onDebounce(event.target.value);\r\n  });\r\n\r\n  return (\r\n    <TextField\r\n      placeholder={placeholder}\r\n      label={label}\r\n      style={style}\r\n      fullWidth={fullWidth}\r\n      onChange={onInputValueChange}\r\n      variant=\"outlined\"/>\r\n  )\r\n}","import React, {useState} from \"react\";\r\nimport {EntranceInfo} from \"../../model/entrance_info\";\r\nimport {entranceService} from \"../../services/entrance.service\";\r\nimport DebouncedInput from \"../common/debounced_input\";\r\nimport {Button, Container, Typography} from \"@material-ui/core\";\r\nimport {capitalizeAndRemoveUnderscores, isStringEmpty} from \"../../util\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectPersonState} from \"../person/person.slice\";\r\nimport { toast } from 'react-toastify';\r\nimport './entrance_input.css';\r\n\r\nexport default function EntranceInput() {\r\n  const person = useSelector(selectPersonState);\r\n  const [entrance, setEntrance]: [EntranceInfo | undefined, any] = useState(undefined);\r\n  const [showCheckIn, setShowCheckIn]: [boolean, any] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = async (searchTerm: string) => {\r\n    if (searchTerm === \"\") {\r\n      setError(\"\");\r\n      setEntrance(undefined);\r\n    } else {\r\n      if (!Number.isNaN(Number.parseInt(searchTerm))) {\r\n        const entrance: EntranceInfo | undefined = await entranceService.getEntranceInfoById(searchTerm);\r\n        setEntrance(entrance);\r\n        setShowCheckIn(true);\r\n        if (entrance === undefined) {\r\n          setShowCheckIn(false);\r\n          setError(\"The entrance id did not exist, please try again.\");\r\n        }\r\n      } else {\r\n        setShowCheckIn(false);\r\n        setError(\"The entrance id did not exist, please try again.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  const onCheckIn = async () => {\r\n    if (entrance !== undefined) {\r\n      const entranceDefined = entrance as EntranceInfo;\r\n      try {\r\n        await entranceService.createPersonEntrance(person.person_id as number, entranceDefined.entrance_id);\r\n        toast.info(\"Checked in successfully!\");\r\n        setError(\"\");\r\n        setShowCheckIn(false);\r\n      } catch (e) {\r\n        toast.error(\"There was an error while checking in, please try again\");\r\n      }\r\n    }\r\n  }\r\n\r\n  let entranceInfo: any;\r\n  if (entrance === undefined) {\r\n    if (!isStringEmpty(error)) {\r\n      entranceInfo = <Typography style = {{marginTop: '3vh'}}>{error}</Typography>\r\n    }\r\n  } else {\r\n    const entranceDefined = entrance as EntranceInfo;\r\n    let roomName: string;\r\n    if (isStringEmpty(entranceDefined.room_number)) {\r\n      roomName = `Building Code: ${entranceDefined.building_code}`;\r\n    } else {\r\n      roomName = `Room Type: ${entranceDefined.building_code} ${entranceDefined.room_number}`\r\n    }\r\n\r\n    entranceInfo = (\r\n     <div className=\"entrance-info-container-with-button\">\r\n       <div className=\"entrance-info-container\">\r\n         <Typography style = {{marginTop: '3vh'}}>\r\n           Building Name: {entranceDefined.name}\r\n         </Typography>\r\n         <Typography>\r\n           {roomName}\r\n         </Typography>\r\n         {entranceDefined.room_type && <Typography>\r\n           Room Type: {capitalizeAndRemoveUnderscores(entranceDefined.room_type)}\r\n         </Typography>}\r\n         <Typography>\r\n           Entrance Number: {entranceDefined.entrance_id}\r\n         </Typography>\r\n       </div>\r\n       {showCheckIn && <Button\r\n         fullWidth\r\n         style={{marginTop: '3vh'}}\r\n         onClick={onCheckIn}\r\n         size = \"large\"\r\n         variant=\"outlined\">Check-In</Button>}\r\n     </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Container className=\"entrance-input-container\">\r\n      <DebouncedInput\r\n        label=\"Check-In\"\r\n        placeholder=\"Entrance Number\"\r\n        onDebounce={onChange}\r\n      />\r\n      {entranceInfo}\r\n    </Container>\r\n    )\r\n}","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectPersonState} from \"../person/person.slice\";\nimport './home.css';\nimport EntranceInput from \"./entrance_input\";\nimport {Container} from \"@material-ui/core\";\nimport {CovidStatus} from \"../../model/covid_status\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function Home() {\n  const person = useSelector(selectPersonState);\n\n  let greeting;\n  let circleColor;\n  let statusMessage = \"You are: \";\n  switch (person.person_status) {\n    case CovidStatus.POSITIVE:\n      greeting = `Stay home ${person.name}!`;\n      circleColor = \"#ff0000\";\n      break;\n    case CovidStatus.INFECTED:\n      greeting = `Be careful ${person.name}!`;\n      statusMessage = `You had an exposure and are: `\n      circleColor = \"#f8d354\";\n      break;\n    default:\n      greeting = `Welcome ${person.name}!`;\n      circleColor = \"#07da63\";\n      break;\n  }\n\n  return (\n    <Container className = \"hello\">\n      <h1 className = \"welcome-message\">{greeting}</h1>\n      <div style = {{display: \"flex\", alignItems: \"center\"}}>\n        <h1 style={{marginRight: \"10px\"}}>{statusMessage}</h1>\n        <FontAwesomeIcon icon = {faCircle} color={circleColor} size=\"2x\"/>\n      </div>\n      <EntranceInput/>\n    </Container>\n  )\n}\n","import {PersonBike} from \"../model/person.bike\";\nimport {toMoment} from \"./conversions.util\";\n\nexport class BikeConversions {\n  public static toPersonBikes(responses: any[]): PersonBike[] {\n    return responses.map(BikeConversions.toPersonBike);\n  }\n\n  public static toPersonBike(response: any): PersonBike {\n    return {\n      shared_bike_id: response.shared_bike_id,\n      person_id: response.person_id,\n      rental_time: toMoment(response.rental_time)\n    };\n  }\n}","import {RemoteService} from \"./remote.service\";\nimport {BikeConversions} from \"../conversions/bike_conversions\";\nimport {PersonBike} from \"../model/person.bike\";\n\nclass PersonBikeService extends RemoteService {\n  public async getBikeRentalsByPersonId(personId: number): Promise<PersonBike[]> {\n    const response = await this.get(`/person_bikes/${personId}`);\n    return BikeConversions.toPersonBikes(response.data);\n  }\n\n  public async createPersonBike(personId: number, bikeId: string): Promise<PersonBike> {\n    const response = await this.post(\"/person_bikes\",{\n      person_id: personId,\n      shared_bike_id: bikeId\n    });\n    return BikeConversions.toPersonBike(response.data[0]);\n  }\n}\n\nexport const personBikeService: PersonBikeService = new PersonBikeService();","import React from \"react\";\nimport {PersonBike} from \"../../model/person.bike\";\nimport {Typography} from \"@material-ui/core\";\nimport \"./bike.log.css\";\nimport {formatMoment} from \"../../util\";\n\nexport default function BikeLog(props: { [bikeHistories: string]: PersonBike[] }) {\n  if (!props.bikeHistories) {\n    return (\n      <div/>\n    )\n  } else {\n    const bikeHistoryElements = props.bikeHistories.map((bikeHistory: PersonBike) => {\n      const isoString: string = bikeHistory.rental_time.toISOString();\n      const date: string = formatMoment(bikeHistory.rental_time);\n      const text = `${date}: Bike ${bikeHistory.shared_bike_id}`;\n      return (\n        <Typography key={isoString}>\n          {text}\n        </Typography>)\n    });\n\n    return (\n      <div className = \"bike-log-container\">\n        <Typography variant = \"h5\">Rental Log</Typography>\n        <div className = \"bike-log-text-container\">\n          {bikeHistoryElements}\n        </div>\n      </div>\n    )\n  }\n}","import {useEffect, useState} from \"react\";\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {useForm} from \"react-hook-form\";\nimport {Person, selectPersonState} from \"../person/person.slice\";\nimport {personBikeService} from \"../../services/person.bike.service\";\nimport {PersonBike} from \"../../model/person.bike\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {formStyles} from \"../form.styles\";\nimport BikeLog from \"./bike.log\";\nimport {selectAllBikes} from \"./bike.slice\";\nimport {isStringEmpty} from \"../../util\";\n\nexport default function Bike() {\n  const [history, setHistory]: [PersonBike[], any] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const rentableBikes: string[] = useSelector(selectAllBikes);\n  const personState: Person = useSelector(selectPersonState);\n  const classes = formStyles();\n  const {register, handleSubmit, errors} = useForm({\n    defaultValues: {\n      shared_bike_id: \"\"\n    }\n  });\n\n  useEffect(() => {\n    personBikeService.getBikeRentalsByPersonId(personState.person_id as number)\n      .then((sharedBikes: PersonBike[]) => {\n        setHistory(sharedBikes);\n      });\n  }, []);\n\n  const onSubmit = async (bike: { [shared_bike_id: string]: string }) => {\n    if (!rentableBikes.includes(bike.shared_bike_id)) {\n      setErrorMessage(\"The bike number does not exist\");\n    } else {\n      try {\n        const personBike: PersonBike = await personBikeService.createPersonBike(\n          personState.person_id as number,\n          bike.shared_bike_id);\n\n        const newHistory = history.slice();\n        newHistory.unshift(personBike);\n        setHistory(newHistory);\n        setErrorMessage(\"\");\n      } catch (error) {\n        setErrorMessage(\"The bike is not available to rent.\");\n      }\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline/>\n      <div className={classes.container}>\n        <h3>Bikes</h3>\n        <form className={classes.form} noValidate\n              onSubmit={handleSubmit(onSubmit)}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register({\n              minLength: 1,\n              required: true\n            })}\n            required\n            fullWidth\n            label=\"Bike number\"\n            name=\"shared_bike_id\"\n          />\n          {errors.shared_bike_id && (<p>Bike number is required.</p>)}\n          {!isStringEmpty(errorMessage) && !errors.shared_bike_id && (<p>{errorMessage}</p>)}\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Check-In\n          </Button>\n        </form>\n      </div>\n      <BikeLog bikeHistories={history}/>\n    </Container>\n  );\n}","import {makeStyles} from \"@material-ui/core/styles\";\n\nexport const cardStyles = makeStyles((theme) => ({\n  root: {\n    width: 'fit-content',\n    padding: '1vh 1vw'\n  },\n  cardContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    marginTop: \"15vh\"\n  },\n  titleContainer: {\n    marginBottom: theme.spacing(4),\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  },\n  testingCentreName: {\n    textAlign: \"center\"\n  },\n  center: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  body: {\n    fontSize: 14,\n    marginBottom: theme.spacing(1),\n    whiteSpace: \"pre-line\"\n  },\n  editButton: {\n    marginTop: theme.spacing(3)\n  },\n}));","import {useSelector} from \"react-redux\";\nimport {selectPersonState} from \"./person.slice\";\nimport React from 'react';\nimport {Button, Card, CardActions, CardContent, Container, Typography} from \"@material-ui/core\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {editPersonRoute} from \"../routes\";\nimport {cardStyles} from \"../common/card.styles\";\n\nexport default function PersonCard() {\n  const classes = cardStyles();\n  const personState = useSelector(selectPersonState);\n\n  return (\n    <Container className={classes.cardContainer}>\n      <Card className={classes.root}>\n        <CardContent className = {classes.center}>\n          <Typography className = {classes.titleContainer} variant=\"h5\">{personState.name}</Typography>\n          <Container>\n            {personState.phone_number && (<Typography className = {classes.body} color = \"textSecondary\">Number: {personState.phone_number}</Typography>)}\n            {personState.email && (<Typography className = {classes.body} color = \"textSecondary\">Email: {personState.email}</Typography>)}\n            {personState.student_id && (<Typography className = {classes.body} color = \"textSecondary\">Student Number: {personState.student_id}</Typography>)}\n            {personState.faculty_id && (<Typography className = {classes.body} color = \"textSecondary\">Faculty Number: {personState.faculty_id}</Typography>)}\n            {personState.job_title && (<Typography className = {classes.body} color = \"textSecondary\">Job Title: {personState.job_title}</Typography>)}\n            <Typography className = {classes.body} color = \"textSecondary\">Notification: {personState.in_app_notification ? \"On\" : \"Off\"}</Typography>\n          </Container>\n          <CardActions>\n            <LinkContainer to={editPersonRoute}>\n              <Button size = \"large\" className = {classes.editButton} variant=\"outlined\">Edit</Button>\n            </LinkContainer>\n          </CardActions>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}","import {createSlice, Draft, PayloadAction} from \"@reduxjs/toolkit\";\nimport {CovidTestInfo} from \"../../model/covid_test\";\nimport {RootState} from \"../../app/store\";\n\ninterface CovidTestState {\n  covid_test?: CovidTestInfo\n}\n\nconst initialState: CovidTestState = {\n  covid_test: undefined\n}\n\nexport const covidTest = createSlice({\n  name: 'covidTest',\n  initialState: initialState,\n  reducers: {\n    setCovidTestToEdit: (state: Draft<any>, action: PayloadAction<CovidTestInfo>) => {\n      state.covid_test = action.payload;\n    }\n  }\n});\n\nexport const { setCovidTestToEdit } = covidTest.actions;\n\nexport const selectCovidTestToEdit = (state: RootState) => state.covidTest.covid_test\n\nexport default covidTest.reducer;","import {CovidTest, CovidTestInfo} from \"../../model/covid_test\";\nimport {Button, Card, CardActions, CardContent, Container, Typography} from \"@material-ui/core\";\nimport {editTestRoute} from \"../routes\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport {formatAddress, formatMoment, isPresent} from \"../../util\";\nimport {CovidTestingCentre} from \"../../model/covid_testing_centre\";\nimport {cardStyles} from \"../common/card.styles\";\nimport \"./covid_test_card.css\";\nimport { useHistory } from \"react-router-dom\";\nimport moment from 'moment-timezone';\nimport {useDispatch} from \"react-redux\";\nimport {setCovidTestToEdit} from \"./covid_test.slice\";\n\nexport default function CovidTestCard(props: { [covidTestInfo: string]: CovidTestInfo }) {\n  const classes = cardStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const covidTest: CovidTest = props.covidTestInfo.covid_test;\n  const covidTestingCentre: CovidTestingCentre = props.covidTestInfo.covid_testing_centre;\n  let circleColor: string;\n  if (isPresent(covidTest.status)) {\n    circleColor = covidTest.status ? \"#ff0000\" : \"#07da63\";\n  } else {\n    circleColor = \"#d3d3d3\"\n  }\n\n  const redirect = () => {\n    dispatch(setCovidTestToEdit(props.covidTestInfo))\n    history.push(editTestRoute);\n  }\n\n  return (\n    <Container className=\"covid-test-card-container\">\n      <Card className={classes.root}>\n        <CardContent className = {classes.center}>\n          <FontAwesomeIcon icon = {faCircle} color={circleColor} size=\"2x\"/>\n          <Container className = {classes.titleContainer}>\n            <Typography variant=\"h5\">\n              Covid-Test\n            </Typography>\n            <Typography\n              className = {`${classes.body} ${classes.testingCentreName}`} color = \"textSecondary\">\n              {covidTestingCentre.name}\n            </Typography>\n          </Container>\n          <Container>\n            <Typography\n              className = {classes.body} color = \"textSecondary\">\n              Test Date: {formatMoment(moment(covidTest.test_time))}\n            </Typography>\n            <Typography\n              className = {classes.body} color = \"textSecondary\">\n              Centre Id: {covidTestingCentre.covid_testing_centre_id}\n            </Typography>\n            <Typography\n              className = {classes.body} color = \"textSecondary\">\n              Address: {formatAddress(covidTestingCentre)}\n            </Typography>\n          </Container>\n          <CardActions>\n            <Button onClick={redirect} size = \"large\" className = {classes.editButton} variant=\"outlined\">Update</Button>\n          </CardActions>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}","import {useEffect, useState} from \"react\";\nimport {CovidTestInfo} from \"../../model/covid_test\";\nimport React from 'react';\nimport {covidTestService} from \"../../services/covid_test.service\";\nimport {Person, selectPersonState} from \"../person/person.slice\";\nimport {useSelector} from \"react-redux\";\nimport CovidTestCard from \"./covid_test_card\";\nimport \"./covid_test_landing_page.css\";\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {createTestRoute} from \"../routes\";\nimport moment from \"moment-timezone\";\n\nexport default function CovidTestLandingPage() {\n  const [tests, setTests]: [CovidTestInfo[], any] = useState([]);\n  const [isLoading, setIsLoading]: [boolean, any] = useState(true);\n  const personState: Person = useSelector(selectPersonState);\n\n  useEffect(() => {\n    covidTestService.getAllCovidTestsForUser(personState.person_id as number)\n      .then((covidTestInfos: CovidTestInfo[]) => {\n        setIsLoading(false);\n        setTests(covidTestInfos);\n      });\n  }, []);\n\n  tests.sort((testA: CovidTestInfo, testB: CovidTestInfo) => {\n    return moment(testB.covid_test.test_time).isAfter(testA.covid_test.test_time) ? 1 : -1;\n  });\n  const covidTestCards: any = tests.map((test: CovidTestInfo, index: number) => {\n    return <div key={index}>\n      <CovidTestCard covidTestInfo={test}/>\n    </div>\n  });\n\n  if (isLoading) {\n    return <div/>\n  }\n\n  return (\n    <div className=\"covid-test-landing-page\">\n      {covidTestCards}\n      <LinkContainer style={{cursor: \"pointer\"}} to = {createTestRoute}>\n        <FontAwesomeIcon icon={faPlusCircle} size=\"2x\"/>\n      </LinkContainer>\n    </div>\n  )\n}\n","import Joi from \"joi\";\nimport {CovidStatus} from \"../../model/covid_status\";\n\nexport const createCovidTestSchema = Joi.object({\n  covid_testing_centre: Joi.object().unknown(true).required(),\n  test_time: Joi.date().required(),\n  status: Joi.string().required(),\n});\n\nexport const updateCovidTestSchema = Joi.object({\n  covid_testing_centre: Joi.object().unknown(true).required(),\n  test_time: Joi.date().required(),\n  status: Joi.string().valid(CovidStatus.POSITIVE, CovidStatus.NEGATIVE).required(),\n});","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {formStyles} from \"../form.styles\";\nimport {selectCovidTestToEdit} from \"./covid_test.slice\";\nimport {CovidTestInfo} from \"../../model/covid_test\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {CovidTestingCentre} from \"../../model/covid_testing_centre\";\nimport {selectAllCovidTestingCentres} from \"./covid_testing_centre.slice\";\nimport {MenuItem, Select, TextField, FormControl, InputLabel} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {CovidStatus, toCovidStatus} from \"../../model/covid_status\";\nimport {Controller, useForm} from \"react-hook-form\";\nimport {joiResolver} from \"@hookform/resolvers/joi\";\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport {MaterialUiPickersDate} from \"@material-ui/pickers/typings/date\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {createCovidTestSchema, updateCovidTestSchema} from \"./covid_test.schema\";\nimport {Person, selectPersonState} from \"../person/person.slice\";\nimport {covidTestService} from \"../../services/covid_test.service\";\nimport {useHistory} from \"react-router-dom\";\nimport {testsRoute} from \"../routes\";\n\nexport interface CovidTestFormState {\n  covid_testing_centre: CovidTestingCentre,\n  test_time: Date,\n  status: CovidStatus\n}\n\nexport default function CovidTestForm(props: { [forCreation: string]: boolean }) {\n  const covidTestToEdit: CovidTestInfo | undefined = useSelector(selectCovidTestToEdit);\n  const forCreation: boolean = props.forCreation;\n  const person: Person = useSelector(selectPersonState);\n  const history = useHistory();\n  const allCovidTestingCentres: CovidTestingCentre[] = useSelector(selectAllCovidTestingCentres);\n  const formState: CovidTestFormState = {\n    covid_testing_centre: allCovidTestingCentres[0],\n    test_time: new Date(),\n    status: CovidStatus.UNKNOWN\n  };\n  if (!props.forCreation) {\n    formState.covid_testing_centre = allCovidTestingCentres.find((covidTestingCentre) => {\n      return covidTestingCentre.covid_testing_centre_id === covidTestToEdit?.covid_testing_centre.covid_testing_centre_id;\n    }) ?? formState.covid_testing_centre;\n    formState.test_time = covidTestToEdit ? new Date(covidTestToEdit.covid_test.test_time) : formState.test_time;\n    formState.status = toCovidStatus(covidTestToEdit?.covid_test.status);\n  }\n  const {handleSubmit, control, errors} = useForm({\n    resolver: forCreation ? joiResolver(createCovidTestSchema) : joiResolver(updateCovidTestSchema),\n    defaultValues: formState\n  });\n  console.log(errors);\n\n  const classes = formStyles();\n\n  const onSubmit = async (data: CovidTestFormState) => {\n    if (forCreation) {\n      await covidTestService.createCovidTest(person.person_id as number, data);\n    } else {\n      await covidTestService.updateCovidTest(person.person_id as number, data, covidTestToEdit?.covid_test.test_input_time as string);\n    }\n    history.push(testsRoute);\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline/>\n      <div className={classes.container}>\n        <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}>\n          <Container className={classes.elementsContainer}>\n            <Controller\n              name = \"covid_testing_centre\"\n              defaultValue={formState.covid_testing_centre}\n              control={control}\n              render={({ onChange, ...props }) => (\n                <Autocomplete\n                  options={allCovidTestingCentres}\n                  defaultValue={formState.covid_testing_centre}\n                  disabled={!forCreation}\n                  getOptionLabel={option => option.name}\n                  onChange={(e, data) => onChange(data)}\n                  renderOption={option => (\n                    <React.Fragment>\n                      {option.name}\n                    </React.Fragment>\n                  )}\n                  renderInput={params => <TextField {...params} label=\"Covid Testing Centre\" variant=\"outlined\"/>}\n                  {...props}\n                />\n              )}\n            />\n            {errors.test_time && <p>Test time is required</p>}\n            <Controller\n              control={control}\n              name=\"test_time\"\n              defaultValue={formState.test_time}\n              render={(props) => (\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <KeyboardDatePicker\n                    disableToolbar\n                    disabled={!forCreation}\n                    variant=\"inline\"\n                    format=\"MM/dd/yyyy\"\n                    margin=\"normal\"\n                    label=\"Covid Test Date\"\n                    value={props.value}\n                    onChange={(date: MaterialUiPickersDate) => props.onChange(date)}\n                    KeyboardButtonProps={{\n                      'aria-label': 'change date',\n                    }}\n                  />\n                </MuiPickersUtilsProvider>\n              )}\n            />\n            {errors.test_time && <p>Test time is required</p>}\n            <Controller\n              render={(props) => (\n                <FormControl>\n                  <InputLabel id=\"test-status\">Test Result</InputLabel>\n                  <Select\n                    labelId=\"test-status\"\n                    value={props.value}\n                    onChange={(event) => props.onChange(event.target.value)}\n                  >\n                    <MenuItem value={CovidStatus.POSITIVE}>Positive</MenuItem>\n                    <MenuItem value={CovidStatus.NEGATIVE}>Negative</MenuItem>\n                    <MenuItem value={CovidStatus.UNKNOWN}>Unknown</MenuItem>\n                  </Select>\n                </FormControl>\n              )}\n              name=\"status\"\n              defaultValue={formState.status}\n              control={control}\n            />\n            {errors.status && <p>When updating your test result, the updated status must be positive or negative.</p>}\n            <Button\n              fullWidth\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}>\n              {props.forCreation ? \"Create\" : \"Update\"}\n            </Button>\n          </Container>\n        </form>\n      </div>\n    </Container>)\n}","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n// from https://material-ui.com/components/accordion/\r\nexport const accordionStyles = makeStyles((theme) => ({\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  },\r\n  root: {\r\n    width: '35vw'\r\n  },\r\n  headingGray: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  notificationBody: {\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  },\r\n  actionContainer: {\r\n    display: 'flex',\r\n    marginLeft: 'auto'\r\n  }\r\n}));","import {NotificationModel, NotificationCategory} from \"../../model/notification\";\r\nimport {formatMoment} from \"../../util\";\r\nimport React from \"react\";\r\nimport {Accordion, AccordionDetails, AccordionSummary, Container} from \"@material-ui/core\";\r\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {accordionStyles} from \"../common/accordion.styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\ninterface NotificationModalProps {\r\n  notificationModels: NotificationModel[]\r\n}\r\n\r\nexport default function NotificationAccordion({ notificationModels } : NotificationModalProps) {\r\n  const dateString = `Sent on: ${formatMoment(notificationModels[0].notification_time)}`;\r\n  const categoryString = `Sent through: ${notificationModels.map(model => model.category).join(\", \")}`;\r\n  const message = `Message: ${notificationModels[0].body}`;\r\n  const classes = accordionStyles();\r\n\r\n  return (\r\n    <Accordion className={classes.root}>\r\n      <AccordionSummary\r\n        expandIcon = {<FontAwesomeIcon icon = {faChevronDown} color=\"black\" size=\"sm\"/>}\r\n      >\r\n        <Typography className={classes.heading}>\r\n          {dateString}\r\n        </Typography>\r\n      </AccordionSummary>\r\n      <AccordionDetails>\r\n        <Container className={classes.notificationBody}>\r\n          <Typography style={{marginBottom: '2vh', whiteSpace: 'pre-line'}}>\r\n            {message}\r\n          </Typography>\r\n          <Typography color = \"textSecondary\">\r\n            {categoryString}\r\n          </Typography>\r\n        </Container>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  );\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {notificationService} from \"../../services/notification.service\";\r\nimport {Person, selectPersonState} from \"../person/person.slice\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {NotificationModel} from \"../../model/notification\";\r\nimport { groupBy } from \"lodash\";\r\nimport {Dictionary} from \"@reduxjs/toolkit\";\r\nimport NotificationAccordion from \"./notification_accordion\";\r\nimport \"./notifications_page.css\";\r\n\r\nexport default function NotificationsPage() {\r\n  const [notifications, setNotifications]: [Dictionary<NotificationModel[]>, any] = useState({});\r\n  const [isLoading, setIsLoading]: [boolean, any] = useState(true);\r\n  const personState: Person = useSelector(selectPersonState);\r\n\r\n  useEffect(() => {\r\n    notificationService.getNotifications(personState.person_id as number)\r\n      .then((notifications: NotificationModel[]) => {\r\n        setIsLoading(false);\r\n        const notificationsGroupedByMessage: Dictionary<NotificationModel[]> = groupBy(notifications, (notification) => notification.notification_time.toISOString());\r\n        setNotifications(notificationsGroupedByMessage);\r\n      });\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return <div/>\r\n  }\r\n\r\n  if (Object.keys(notifications).length === 0) {\r\n    return (\r\n      <div className = \"notifications_page\">\r\n        <h1>You have no notifications</h1>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const sortedNotificationKeys = Object.keys(notifications).sort((keyA: any, keyB: any) => {\r\n    const notificationsA = notifications[keyA] as NotificationModel[];\r\n    const notificationsB = notifications[keyB] as NotificationModel[];\r\n    return notificationsA[0].notification_time.isAfter(notificationsB[0].notification_time) ? -1 : 1;\r\n  })\r\n\r\n  const notificationElements = sortedNotificationKeys.map((key: any, index) => {\r\n    return <NotificationAccordion key = {index} notificationModels={notifications[key] as NotificationModel[]}/>\r\n  })\r\n\r\n  return (\r\n    <div className = \"notifications_page\">\r\n      <h2>Notifications</h2>\r\n      {notificationElements}\r\n    </div>\r\n  )\r\n}","import {ClassDay} from \"../model/class_day\";\nimport {toMoment} from \"./conversions.util\";\n\nexport class ScheduledClassConversions {\n  private static DAY_CONVERSION_MAP = new Map([\n    [0, \"Sunday\"],\n    [1, \"Monday\"],\n    [2, \"Tuesday\"],\n    [3, \"Wednesday\"],\n    [4, \"Thursday\"],\n    [5, \"Friday\"],\n    [6, \"Sunday\"]\n  ]);\n\n  public static toClassDays(scheduledClassDatas: any[]): ClassDay[] {\n    return scheduledClassDatas.map(ScheduledClassConversions.toClassDay);\n  }\n\n  public static toClassDay(scheduledClassData: any): ClassDay {\n    const conversionObject = {\n      start_day: toMoment(scheduledClassData.start_day),\n      end_day: toMoment(scheduledClassData.end_day),\n      day_of_week: {\n        day_name: ScheduledClassConversions.DAY_CONVERSION_MAP.get(scheduledClassData.day_of_week),\n        day_number: scheduledClassData.day_of_week\n      }\n    };\n    return {...scheduledClassData, ...conversionObject};\n  }\n}","import {RemoteService} from \"./remote.service\";\nimport {ClassDay} from \"../model/class_day\";\nimport {ScheduledClassConversions} from \"../conversions/scheduled_class.conversions\";\n\nclass ScheduledClassService extends RemoteService {\n  public async getScheduledClassesByQueryString(queryString: string): Promise<ClassDay[]> {\n    const response = await this.get(`/scheduled_class_info/${encodeURI(queryString)}`);\n    return ScheduledClassConversions.toClassDays(response.data);\n  }\n\n  public async getScheduledClassesByPersonId(personId: number): Promise<ClassDay[]> {\n    const response = await this.get(`/scheduled_class_info/person_id/${personId}`);\n    return ScheduledClassConversions.toClassDays(response.data);\n  }\n\n  public async createPersonScheduledClass(personId: number, scheduledClassId: string): Promise<void> {\n    await this.post(\"/person_scheduled_classes\", {\n      person_id: personId,\n      scheduled_class_id: scheduledClassId\n    });\n  }\n\n  public async deletePersonScheduledClass(personId: number, scheduledClassId: string): Promise<void> {\n    await this.delete(`/person_scheduled_classes/${personId}/${encodeURI(scheduledClassId)}`);\n  }\n }\n\n export const scheduledClassService = new ScheduledClassService();\n","import React from \"react\";\nimport {accordionStyles} from \"./accordion.styles\";\nimport {Accordion, AccordionDetails, AccordionSummary, Button, Container} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChevronDown} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./action_accordion.css\";\n\ninterface ScheduledClassProps {\n  onActionClick: (scheduled_class_id: string) => any,\n  id: any,\n  actionButtonLabel: string,\n  children: any,\n  heading: string,\n  secondaryHeading?: string,\n}\n\nexport default function ActionAccordion({onActionClick, id, actionButtonLabel, children, heading, secondaryHeading}: ScheduledClassProps) {\n  const accordionClasses = accordionStyles();\n\n  return (\n    <Accordion className={accordionClasses.root}>\n      <AccordionSummary\n        className = {accordionClasses.actionContainer}\n        expandIcon = {<FontAwesomeIcon icon = {faChevronDown} color=\"black\" size=\"sm\"/>}\n      >\n        <Typography className={accordionClasses.heading}>\n          {heading}\n        </Typography>\n        {secondaryHeading && (<Typography className={accordionClasses.secondaryHeading}>\n          {secondaryHeading}\n        </Typography>\n        )}\n        <div className = {accordionClasses.actionContainer}>\n          <Button onClick={(event) => {\n            event.stopPropagation();\n            onActionClick(id)\n          }}>\n            {actionButtonLabel}\n          </Button>\n        </div>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Container className={accordionClasses.notificationBody}>\n          {children}\n        </Container>\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n","import {makeStyles} from \"@material-ui/core/styles\";\n\nexport const accordionContentStyles = makeStyles((theme) => ({\n  dayContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    marginBottom: '2vh'\n  }\n}));","import React from \"react\";\nimport {ClassDay} from \"../../model/class_day\";\nimport {capitalize, formatMoment} from \"../../util\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {accordionContentStyles} from \"../common/accordion_content.styles\";\n\ninterface ScheduledClassAccordionContentProps {\n  classDays: ClassDay[]\n}\n\nexport default function ScheduledClassAccordionContent({classDays}: ScheduledClassAccordionContentProps) {\n  const dayClasses = accordionContentStyles();\n  const startDay: string = formatMoment(classDays[0].start_day);\n  const endDay: string = formatMoment(classDays[0].end_day);\n  classDays.sort((classDayA: ClassDay, classDayB: ClassDay) => {\n    return classDayA.day_of_week.day_number - classDayB.day_of_week.day_number;\n  });\n\n  const dayInfos = classDays.map(classDay => {\n    return (\n      <div className = {dayClasses.dayContainer} key={classDay.day_of_week.day_number}>\n        <Typography color = \"textSecondary\">\n          Day: {`${capitalize(classDay.day_of_week.day_name)}`}\n        </Typography>\n        <Typography color = \"textSecondary\">\n          Room: {`${classDay.building_code} ${classDay.room_number}`}\n        </Typography>\n      </div>\n    )\n  })\n\n  return (\n      <div style = {{display: 'flex', flexDirection: 'column'}}>\n        <Typography>\n          {`${classDays[0].class_name} (${startDay} - ${endDay})`}\n        </Typography>\n        {dayInfos}\n      </div>\n\n  )\n}","import React, {useEffect, useState} from \"react\";\nimport {Dictionary} from \"@reduxjs/toolkit\";\nimport {ClassDay} from \"../../model/class_day\";\nimport {scheduledClassService} from \"../../services/scheduled_class.service\";\nimport {Person, selectPersonState} from \"../person/person.slice\";\nimport {useSelector} from \"react-redux\";\nimport {groupBy} from 'lodash';\nimport {Typography} from \"@material-ui/core\";\nimport ActionAccordion from \"../common/action_accordion\";\nimport DebouncedInput from \"../common/debounced_input\";\nimport \"./scheduled_class.css\";\nimport ScheduledClassAccordionContent from \"./scheduled_class_accordion_content\";\n\nexport default function ScheduledClasses() {\n  const [enrolledClasses, setEnrolledClasses]: [Dictionary<ClassDay[]>, any] = useState({});\n  const [searchedClasses, setSearchedClasses]: [Dictionary<ClassDay[]>, any] = useState({});\n  const [searchTerm, setSearchTerm]: [string, any] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSearchLoading, setIsSearchLoading] = useState(false);\n  const personState: Person = useSelector(selectPersonState);\n\n  const refreshEnrolledClasses = async (): Promise<Dictionary<ClassDay[]>> => {\n    return scheduledClassService.getScheduledClassesByPersonId(personState.person_id as number)\n      .then((classDays: ClassDay[]) => {\n        const newEnrolledClasses = groupBy(classDays, \"scheduled_class_id\");\n        setEnrolledClasses(newEnrolledClasses);\n        return newEnrolledClasses;\n      });\n  }\n\n  useEffect(() => {\n    refreshEnrolledClasses().then(() => {\n      setIsLoading(false);\n    });\n  }, []);\n\n  const setSearchedClassesWithoutEnrolled = (searchResults: ClassDay[], whitelistedClasses: Dictionary<ClassDay[]>) => {\n    const searchedClassesWithoutEnrolled = searchResults.filter(searchedClass => {\n      return !whitelistedClasses.hasOwnProperty(searchedClass.scheduled_class_id);\n    });\n    setSearchedClasses(groupBy(searchedClassesWithoutEnrolled, \"scheduled_class_id\"));\n  }\n\n  const onSearch = async (newSearchTerm: string, whitelistedClasses = enrolledClasses) => {\n    setSearchTerm(newSearchTerm);\n    if (newSearchTerm.length > 0) {\n      setIsSearchLoading(true);\n      const newSearchedClasses = await scheduledClassService.getScheduledClassesByQueryString(newSearchTerm);\n      setIsSearchLoading(false);\n      setSearchedClassesWithoutEnrolled(newSearchedClasses, whitelistedClasses);\n    } else {\n      setSearchedClasses({});\n    }\n  }\n\n  const onActionButtonClick = async (endpointFn: (a: number, b: string) => Promise<any>,\n                                     scheduled_class_id: string): Promise<void> => {\n    await endpointFn(personState.person_id as number, scheduled_class_id);\n    const newEnrolledClasses = await refreshEnrolledClasses();\n    await onSearch(searchTerm, newEnrolledClasses);\n  }\n\n  const onAdd = async (scheduled_class_id: string) => {\n    await onActionButtonClick(\n      scheduledClassService.createPersonScheduledClass.bind(scheduledClassService),\n      scheduled_class_id);\n  }\n\n  const onDelete = async (scheduled_class_id: string) => {\n    await onActionButtonClick(\n      scheduledClassService.deletePersonScheduledClass.bind(scheduledClassService),\n      scheduled_class_id);\n  }\n\n  if (isLoading) {\n    return <div/>\n  }\n\n  const createClassAccordion = (\n    classDayDict: Dictionary<ClassDay[]>,\n    key: string,\n    index: number,\n    actionButtonLabel: string,\n    onActionClick: any): any => {\n    const classDays: ClassDay[] = classDayDict[key] as ClassDay[];\n    return <ActionAccordion\n      key = {index}\n      heading={classDays[0].scheduled_class_id}\n      id={classDays[0].scheduled_class_id}\n      secondaryHeading={classDays[0].activity}\n      onActionClick={onActionClick}\n      actionButtonLabel={actionButtonLabel}>\n      <ScheduledClassAccordionContent classDays={classDays}/>\n    </ActionAccordion>\n  }\n\n\n  let enrolledClassElement: any;\n  if (Object.keys(enrolledClasses).length === 0) {\n    enrolledClassElement = <Typography>You are currently not enrolled in any classes</Typography>\n  } else {\n    enrolledClassElement = Object.keys(enrolledClasses).map((key, index) => {\n      return createClassAccordion(enrolledClasses, key, index, \"Remove\", onDelete);\n    });\n  }\n\n  enrolledClassElement = (\n    <div className = \"enrolled-class-container\">\n      <h3>Enrolled Classes</h3>\n      {enrolledClassElement}\n    </div>\n  )\n\n  let searchResultElement: any;\n  if (Object.keys(searchedClasses).length === 0) {\n    if (searchTerm !== \"\" && !isSearchLoading) {\n      searchResultElement = <Typography>No classes were found by the search term.</Typography>\n    }\n  } else {\n    searchResultElement = Object.keys(searchedClasses).map((key, index) => {\n      return createClassAccordion(searchedClasses, key, index, \"Add\", onAdd);\n    });\n  }\n\n  return (\n    <div className=\"scheduled-class-container\">\n      {enrolledClassElement}\n      <div className=\"search-class-container\">\n        <h3>Enroll in Classes</h3>\n        <DebouncedInput\n          style={{marginBottom: '2vh'}}\n          fullWidth={true}\n          label=\"Search\"\n          placeholder=\"Search for classes by course id\"\n          onDebounce={onSearch}\n        />\n        {searchResultElement}\n      </div>\n    </div>\n  )\n}","import {RemoteService} from \"./remote.service\";\nimport {BubbleInfo} from \"../model/bubble_info\";\nimport {Bubble} from \"../model/bubble\";\nimport {SimplifiedPerson} from \"../model/simplified_person\";\n\nclass BubbleService extends RemoteService {\n  public async getBubbleInfosBySearchTerm(searchTerm: string): Promise<BubbleInfo[]> {\n    const response = await this.get(`/bubble_count_by_term/${encodeURI(searchTerm)}`);\n    return response.data;\n  }\n\n  public async getAllPeopleInBubbleBySearchTerm(searchTerm: string): Promise<SimplifiedPerson[]> {\n    const response = await this.get(`/persons_in_all_bubbles_by_term/${encodeURI(searchTerm)}`);\n    return response.data;\n  }\n\n  public async getBubbleInfosByPersonId(personId: number): Promise<BubbleInfo[]> {\n    const response = await this.get(`/bubble_count_by_id/${personId}`);\n    return response.data;\n  }\n\n  public async createPersonBubble(personId: number, bubbleId: string | number): Promise<void> {\n    await this.post(\"/person_bubbles\", {\n      person_id: personId,\n      bubble_id: bubbleId\n    });\n  }\n\n  public async deletePersonBubble(personId: number, bubbleId: string): Promise<void> {\n    await this.delete(`/person_bubbles/person_id/${personId}/bubble_id/${bubbleId}`);\n  }\n\n  public async createBubble(bubble: any): Promise<Bubble> {\n    const response = await this.post(\"/bubbles\", bubble);\n    return response.data[0];\n  }\n\n  public async deleteBubbleById(bubble_id: number): Promise<void> {\n    await this.delete(`/bubbles/${bubble_id}`);\n  }\n}\n\nexport const bubbleService = new BubbleService();\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {BubbleInfo} from \"../../model/bubble_info\";\nimport {Button} from \"@material-ui/core\";\n\ninterface BubbleAccordionContentProps {\n  bubble: BubbleInfo,\n  canDelete: boolean,\n  onDelete: (bubble: BubbleInfo) => any\n}\n\nexport default function BubbleAccordionContent({ bubble, canDelete, onDelete }: BubbleAccordionContentProps) {\n  return (\n    <div style = {{display: 'flex', flexDirection: 'column'}}>\n      <Typography style = {{marginBottom: '2vh'}}>\n        {bubble.description}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        Bubble Id: {bubble.bubble_id}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        Person Count: {bubble.count}\n      </Typography>\n      {canDelete &&\n      (<Button\n          size=\"small\"\n          style={{marginTop: '2vh'}}\n          onClick={() => onDelete(bubble)}>\n          Delete Bubble\n        </Button>\n      )}\n    </div>\n  )\n}","import React, {useEffect, useState} from \"react\";\nimport {Person, selectPersonState} from \"../person/person.slice\";\nimport {useSelector} from \"react-redux\";\nimport ActionAccordion from \"../common/action_accordion\";\nimport {Button, Typography} from \"@material-ui/core\";\nimport DebouncedInput from \"../common/debounced_input\";\nimport {BubbleInfo} from \"../../model/bubble_info\";\nimport {bubbleService} from \"../../services/bubble.service\";\nimport BubbleAccordionContent from \"./bubble_accordion_content\";\nimport {useHistory} from \"react-router\";\nimport {createBubbleRoute} from \"../routes\";\nimport {SimplifiedPerson} from \"../../model/simplified_person\";\n\nexport default function BubblePage() {\n  const [usersBubbles, setUsersBubbles]: [BubbleInfo[], any] = useState([]);\n  const [searchedBubbles, setSearchedBubbles]: [BubbleInfo[], any] = useState([]);\n  const [allPeopleText, setAllPeopleText]: [string, any] = useState(\"\");\n  const [searchTerm, setSearchTerm]: [string, any] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSearchLoading, setIsSearchLoading] = useState(false);\n  const personState: Person = useSelector(selectPersonState);\n  const history = useHistory();\n\n  const refreshBubbles = async (): Promise<BubbleInfo[]> => {\n    return bubbleService.getBubbleInfosByPersonId(personState.person_id as number)\n      .then((bubbles: BubbleInfo[]) => {\n        setUsersBubbles(bubbles);\n        return bubbles;\n      });\n  }\n\n  useEffect(() => {\n    refreshBubbles().then(() => {\n      setIsLoading(false);\n    });\n  }, []);\n\n  const setSearchedBubblesWithoutWhitelist = (searchResults: BubbleInfo[], whitelistedBubbles: BubbleInfo[]) => {\n    const searchedClassesExcludingWhitelist = searchResults.filter(searchedBubble => {\n      return !whitelistedBubbles.some(bubble => bubble.bubble_id === searchedBubble.bubble_id);\n    });\n    setSearchedBubbles(searchedClassesExcludingWhitelist);\n  }\n\n  const setAllPeople = (newSearchedClasses: BubbleInfo[], allPeopleInSearched: SimplifiedPerson[]) => {\n    if (newSearchedClasses.length > 0) {\n      if (allPeopleInSearched.length === 0) {\n        setAllPeopleText(\"There is no person that is a member of all the searched bubbles\");\n      } else if (allPeopleInSearched.length === 1) {\n        setAllPeopleText(`${allPeopleInSearched[0].name} is a member of all of the searched bubbles`);\n      } else {\n        const lastPerson = allPeopleInSearched.pop() as SimplifiedPerson;\n        setAllPeopleText(`${allPeopleInSearched.map(_ => _.name).join(\", \")} and ${lastPerson.name} are members of all the searched bubbles`);\n      }\n    } else {\n      setAllPeopleText(\"\");\n    }\n  }\n\n  const onSearch = async (newSearchTerm: string, whitelistedBubbles: BubbleInfo[] = usersBubbles) => {\n    setSearchTerm(newSearchTerm);\n    if (newSearchTerm.length > 0) {\n      setIsSearchLoading(true);\n      const [newSearchedClasses, allPeople] = await Promise.all([\n        bubbleService.getBubbleInfosBySearchTerm(newSearchTerm),\n        bubbleService.getAllPeopleInBubbleBySearchTerm(newSearchTerm)\n      ]);\n\n      setAllPeople(newSearchedClasses, allPeople);\n      setIsSearchLoading(false);\n      setSearchedBubblesWithoutWhitelist(newSearchedClasses, whitelistedBubbles);\n    } else {\n      setSearchedBubbles([]);\n    }\n  }\n\n  const refreshPage = async () => {\n    const newBubbles = await refreshBubbles();\n    await onSearch(searchTerm, newBubbles);\n  }\n\n  const onActionButtonClick = async (endpointFn: (a: number, b: string) => Promise<any>,\n                                     bubble_id: string): Promise<void> => {\n    await endpointFn(personState.person_id as number, bubble_id);\n    await refreshPage();\n  }\n\n  const onAdd = async (bubble_id: string) => {\n    await onActionButtonClick(\n      bubbleService.createPersonBubble.bind(bubbleService),\n      bubble_id);\n  }\n\n  const onDelete = async (bubble_id: string) => {\n    await onActionButtonClick(\n      bubbleService.deletePersonBubble.bind(bubbleService),\n      bubble_id);\n  }\n\n  const onDeleteBubble = async (bubble: BubbleInfo) => {\n    await bubbleService.deleteBubbleById(bubble.bubble_id);\n    await refreshPage();\n  }\n\n  if (isLoading) {\n    return <div/>\n  }\n\n  const createClassAccordion = (\n    bubble: BubbleInfo,\n    actionButtonLabel: string,\n    canDelete: boolean,\n    onActionClick: any): any => {\n    return (<ActionAccordion\n      key={bubble.bubble_id}\n      heading={bubble.title}\n      id={bubble.bubble_id}\n      onActionClick={onActionClick}\n      actionButtonLabel={actionButtonLabel}>\n      <BubbleAccordionContent\n        bubble={bubble}\n        canDelete={canDelete}\n        onDelete={onDeleteBubble}/>\n    </ActionAccordion>);\n  }\n\n\n  let userBubbleElement: any;\n  if (usersBubbles.length === 0) {\n    userBubbleElement = <Typography>You are not in any bubbles.</Typography>\n  } else {\n    userBubbleElement = usersBubbles.map(bubble => {\n      return createClassAccordion(bubble, \"Remove\", true, onDelete);\n    });\n  }\n\n  userBubbleElement = (\n    <div className=\"enrolled-class-container\">\n      <h3>Your Bubbles</h3>\n      <Button\n        variant=\"outlined\"\n        style={{marginBottom: '2vh'}}\n        onClick={() => history.push(createBubbleRoute)}>\n        Create a bubble\n      </Button>\n      {userBubbleElement}\n    </div>\n  )\n\n  let searchResultElement: any;\n  if (searchedBubbles.length === 0) {\n    if (searchTerm !== \"\" && !isSearchLoading) {\n      searchResultElement = <Typography>No bubbles were found by the search term.</Typography>\n    }\n  } else {\n    searchResultElement = (<div>\n      <Typography>{allPeopleText}</Typography>\n      {searchedBubbles.map(bubble => {\n        return createClassAccordion(bubble, \"Add\", false, onAdd);\n      })}\n    </div>)\n  }\n\n  return (\n    <div className=\"scheduled-class-container\">\n      {userBubbleElement}\n      <div className=\"search-class-container\">\n        <h3>Join Bubbles</h3>\n        <DebouncedInput\n          style={{marginBottom: '2vh'}}\n          fullWidth={true}\n          label=\"Search\"\n          placeholder=\"Search for bubbles\"\n          onDebounce={onSearch}\n        />\n        {searchResultElement}\n      </div>\n    </div>\n  )\n}","import Joi from \"joi\";\n\nexport const createBubbleSchema = Joi.object({\n  title: Joi.string().required(),\n  description: Joi.string().required(),\n});","import React from \"react\";\nimport {Person, selectPersonState} from \"../person/person.slice\";\nimport {useSelector} from \"react-redux\";\nimport {useForm} from \"react-hook-form\";\nimport {joiResolver} from \"@hookform/resolvers/joi\";\nimport {createBubbleSchema} from \"./bubble.schema\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {formStyles} from \"../form.styles\";\nimport {useHistory} from \"react-router\";\nimport {bubbleService} from \"../../services/bubble.service\";\nimport {bubbleLandingRoute} from \"../routes\";\n\nexport default function BubbleForm() {\n  const personState: Person = useSelector(selectPersonState);\n  const classes = formStyles();\n  const {register, handleSubmit, errors} = useForm({\n    resolver: joiResolver(createBubbleSchema)\n  });\n  const history = useHistory();\n\n  const onSubmit = async (data: any) => {\n    const createdBubble = await bubbleService.createBubble(data);\n    await bubbleService.createPersonBubble(personState.person_id as number, createdBubble.bubble_id);\n    history.push(bubbleLandingRoute);\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline/>\n      <div className={classes.container}>\n        <h3>Create a Bubble</h3>\n        <form className={classes.form} noValidate\n              onSubmit={handleSubmit(onSubmit)}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register}\n            required\n            autoComplete=\"off\"\n            fullWidth\n            label=\"Title\"\n            name=\"title\"\n          />\n          {errors.title && <p>Title is required.</p>}\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register}\n            fullWidth\n            required\n            label=\"Description\"\n            name=\"description\"\n          />\n          {errors.description && <p>Description is required.</p>}\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Create Bubble\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n}","import {RemoteService} from \"./remote.service\";\n\nclass StatsService extends RemoteService {\n  public async getLargestScheduledClasses(): Promise<any[]> {\n    const response = await this.get(\"/largest_scheduled_class\");\n    return response.data;\n  }\n\n  public async getMostFrequentlyVisitedBuildings(): Promise<any[]> {\n    const response = await this.get(\"/frequently_used_buildings\");\n    return response.data;\n  }\n}\n\nexport const statsService = new StatsService();\n","import React, {useEffect, useState} from \"react\";\nimport {isStringEmpty, pluralize} from \"../../util\";\nimport {statsService} from \"../../services/stats.service\";\n\nexport default function StatsPage() {\n  const [frequentlyUsedBuildingStr, setFrequentlyUsedBuildingStr] = useState(\"\");\n  const [largestScheduledClassStr, setLargestScheduledClassStr] = useState(\"\");\n\n  const formatFrequentlyUsedBuilding = (frequentlyUsedBuilding: any): string => {\n    const numTimesString = pluralize(frequentlyUsedBuilding.count, \"time\");\n    return `${frequentlyUsedBuilding.building_code} (${frequentlyUsedBuilding.count} ${numTimesString})`;\n  }\n\n  const formatScheduledClass = (scheduledClass: any): string => {\n    const numPersonsString = scheduledClass.count === 1 ? \"person\" : \"people\";\n    return `${scheduledClass.scheduled_class_id} (${scheduledClass.count} ${numPersonsString})`;\n  }\n\n  const formatAndSet = (\n    elements: any[],\n    setFunction: any,\n    formatFn: (element: any) => string,\n    singleElementString: string,\n    multiElementString: string): void => {\n    if (elements.length > 0) {\n      if (elements.length === 1) {\n        setFunction(`${formatFn(elements[0])} ${singleElementString}`)\n      } else {\n        const elementStrs = elements.map((element) => {\n          return formatFn(element);\n        });\n        const lastEl = elementStrs.pop();\n        setFunction(`${elementStrs.join(\", \")} and ${lastEl} ${multiElementString}`)\n      }\n    }\n  }\n\n  const formatAndSetLargestScheduledClasses = (largestScheduledClasses: any) => {\n    formatAndSet(\n      largestScheduledClasses,\n      setLargestScheduledClassStr,\n      formatScheduledClass,\n      \"has the most enrolled users.\",\n      \"have the enrolled users.\"\n    );\n  }\n\n  const formatAndSetFrequentlyUsedBuildings = (mostFrequentlyVisitedBuildings: any[]): void => {\n    formatAndSet(\n      mostFrequentlyVisitedBuildings,\n      setFrequentlyUsedBuildingStr,\n      formatFrequentlyUsedBuilding,\n      \"is the most frequently visited building.\",\n      \"are the most frequently visited buildings.\"\n    );\n  }\n\n  useEffect(() => {\n    Promise.all([\n      statsService.getMostFrequentlyVisitedBuildings(),\n      statsService.getLargestScheduledClasses()]).then(([mostFrequentlyVisitedBuildings, largestScheduledClasses]: [any[], any[]]) => {\n      formatAndSetFrequentlyUsedBuildings(mostFrequentlyVisitedBuildings);\n      formatAndSetLargestScheduledClasses(largestScheduledClasses);\n    });\n  }, [])\n\n  if (isStringEmpty(frequentlyUsedBuildingStr) && isStringEmpty(largestScheduledClassStr)) {\n    return <div/>\n  }\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '15vh'}}>\n      <h1 style={{marginBottom: '20px'}}>Stats</h1>\n      <h5 style={{margin: '20px', textAlign: 'left'}}>{frequentlyUsedBuildingStr}</h5>\n      <h5 style={{margin: '20px', textAlign: 'left'}}>{largestScheduledClassStr}</h5>\n    </div>)\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchPerson, selectIsLoggedIn, appLoaded, selectIsAppLoading} from \"./features/login/login.slice\";\r\nimport PersonForm from \"./features/person/person.form\";\r\nimport {CookieService} from \"./services/cookie.service\";\r\nimport NavBar from \"./features/nav/navbar\";\r\nimport {Redirect, Route, Switch} from \"react-router\";\r\nimport Home from \"./features/home/home\";\r\nimport {\r\n  bikeRoute, bubbleLandingRoute, createBubbleRoute,\r\n  createTestRoute,\r\n  editPersonRoute,\r\n  editTestRoute,\r\n  homeRoute, notificationsRoute,\r\n  personInfoRoute, scheduledClassesRoute, statsRoute,\r\n  testsRoute\r\n} from \"./features/routes\";\r\nimport Bike from \"./features/bike/bike\";\r\nimport {fetchBikes} from \"./features/bike/bike.slice\";\r\nimport PersonCard from \"./features/person/person.card\";\r\nimport {fetchCovidTestingCentres} from \"./features/covid_tests/covid_testing_centre.slice\";\r\nimport CovidTestLandingPage from \"./features/covid_tests/covid_test_landing_page\";\r\nimport CovidTestForm from \"./features/covid_tests/covid_test.form\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport NotificationsPage from \"./features/notification/notifications_page\";\r\nimport ScheduledClassesPage from \"./features/scheduled_class/scheduled_classes\";\r\nimport BubblePage from \"./features/bubble/bubble_page\";\r\nimport BubbleForm from \"./features/bubble/bubble.form\";\r\nimport StatsPage from \"./features/stats/stats_page\";\r\n\r\nexport default function App() {\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n  const isAppLoading = useSelector(selectIsAppLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const personId: string | undefined = CookieService.getPersonId();\r\n    if (personId) {\r\n      dispatch(fetchPerson(personId));\r\n    } else {\r\n      dispatch(appLoaded());\r\n    }\r\n    dispatch(fetchBikes());\r\n    dispatch(fetchCovidTestingCentres());\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <NavBar/>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={true}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      {!isAppLoading && !isLoggedIn && <PersonForm/>}\r\n      {!isAppLoading && isLoggedIn && (\r\n        <Switch>\r\n          <Route exact path = '/' component={Home}/>\r\n          <Route path = {homeRoute} component={Home}/>\r\n          <Route path = {editPersonRoute} component={PersonForm}/>\r\n          <Route path = {bikeRoute} component={Bike}/>\r\n          <Route path = {personInfoRoute} component={PersonCard}/>\r\n          <Route path = {testsRoute} component={CovidTestLandingPage}/>\r\n          <Route path = {notificationsRoute} component={NotificationsPage}/>\r\n          <Route path = {scheduledClassesRoute} component={ScheduledClassesPage}/>\r\n          <Route path = {bubbleLandingRoute} component={BubblePage}/>\r\n          <Route path = {createBubbleRoute} component={BubbleForm}/>\r\n          <Route path = {statsRoute} component={StatsPage}/>\r\n          <Route path = {createTestRoute} render={()=> <CovidTestForm forCreation={true}/>}/>\r\n          <Route path = {editTestRoute} render={()=> <CovidTestForm forCreation={false}/>}/>\r\n          <Redirect to={homeRoute}/>\r\n        </Switch>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport loginReducer from \"../features/login/login.slice\";\r\nimport personReducer from \"../features/person/person.slice\";\r\nimport bikeReducer from \"../features/bike/bike.slice\";\r\nimport covidTestingCentreReducer from \"../features/covid_tests/covid_testing_centre.slice\";\r\nimport covidTestReducer from \"../features/covid_tests/covid_test.slice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    login: loginReducer,\r\n    person: personReducer,\r\n    bike: bikeReducer,\r\n    covidTestingCentre: covidTestingCentreReducer,\r\n    covidTest: covidTestReducer\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n        <Provider store={store}>\r\n          <App />\r\n        </Provider>\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}